import { useState, useEffect } from 'react';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { loginUser, fetchProfile, clearError, clearSuccess } from '../store/authSlice';

export function LoginPage() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { loading, error, success } = useSelector((state) => state.auth);
  
  const [formData, setFormData] = useState({
    username: '',
    password: ''
  });

  const [showPassword, setShowPassword] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  useEffect(() => {
    const expired = searchParams.get('expired');
    const registered = searchParams.get('registered');
    
    if (expired) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    }
    
    if (registered) {
      dispatch(clearSuccess());
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    }

    return () => {
      dispatch(clearError());
      dispatch(clearSuccess());
    };
  }, [searchParams, dispatch]);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    if (error) {
      dispatch(clearError());
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.username || !formData.password) {
      return;
    }

    try {
      const result = await dispatch(loginUser(formData));
      if (loginUser.fulfilled.match(result)) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await dispatch(fetchProfile());
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const returnUrl = searchParams.get('returnUrl') || '/';
        navigate(returnUrl);
      }
    } catch (error) {
      console.error('Login error:', error);
    }
  };

  const handleForgotPassword = () => {
    navigate('/reset-password');
  };

  const canSubmit = formData.username && formData.password && !loading;

  return (
    <div className="auth-container">
      <div className="auth-card">
        <div className="back-button-container">
          <button 
            className="back-button" 
            onClick={() => navigate('/')}
            type="button"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>
        
        <h1 className="auth-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
        <p className="auth-subtitle">–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</p>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {searchParams.get('expired') && (
          <div className="form-error">
            –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.
          </div>
        )}

        {searchParams.get('registered') && (
          <div className="form-success">
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.
          </div>
        )}

        {success && (
          <div className="form-success">
            {success}
          </div>
        )}
        
        <form className="auth-form" onSubmit={handleSubmit}>
          <div className="form-group">
            <label className="form-label" htmlFor="username">
              –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email
            </label>
            <input
              id="username"
              name="username"
              type="text"
              className="form-input"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ email"
              value={formData.username}
              onChange={handleChange}
              required
              autoComplete="username"
            />
          </div>
          
          <div className="form-group">
            <label className="form-label" htmlFor="password">
              –ü–∞—Ä–æ–ª—å
            </label>
            <div className="password-input-container">
              <input
                id="password"
                name="password"
                type={showPassword ? "text" : "password"}
                className="form-input"
                placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å"
                value={formData.password}
                onChange={handleChange}
                required
                autoComplete="current-password"
              />
              <button
                type="button"
                className="password-toggle"
                onClick={() => setShowPassword(!showPassword)}
                tabIndex="-1"
              >
                {showPassword ? "üôà" : "üëÅÔ∏è"}
              </button>
            </div>
          </div>

          {/* –û–ø—Ü–∏–∏ */}
          <div className="form-options">
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={rememberMe}
                onChange={(e) => setRememberMe(e.target.checked)}
              />
              <span className="checkmark"></span>
              –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
            </label>

            <button
              type="button"
              className="forgot-password-link"
              onClick={handleForgotPassword}
            >
              –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
            </button>
          </div>
          
          {error && (
            <div className="form-error">
              {typeof error === 'string' ? error : error.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}
            </div>
          )}
          
          <button 
            className="auth-button" 
            type="submit" 
            disabled={!canSubmit}
          >
            {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </button>
          
          <div className="auth-divider">
            <span>–∏–ª–∏</span>
          </div>

          <button
            className="auth-button outline"
            type="button"
            onClick={() => navigate('/register')}
          >
            –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
          </button>
        </form>
      </div>
    </div>
  );
}
