import React, { useState, useEffect, useMemo } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { showNotification } from '@mantine/notifications';
import { updateProfileComplete, updateProfile, fetchProfile } from '../../../store/authSlice';
import {
  Box,
  Container,
  Paper,
  Button,
  Group,
  Text,
  Title,
  Stack,
  TextInput,
  Textarea,
  Select,
  MultiSelect,
  FileInput,
  Progress,
  Alert,
  Grid,
  Card,
  Badge,
  Divider,
  ActionIcon,
  Tooltip,
  Loader,
  Center,
  Radio,
  SimpleGrid,
  ThemeIcon,
} from '@mantine/core';
import { DateInput } from '@mantine/dates';
import { motion } from 'framer-motion';
import {
  IconUser,
  IconMail,
  IconPhone,
  IconCalendar,
  IconMapPin,
  IconCamera,
  IconBook,
  IconBriefcase,
  IconTarget,
  IconLanguage,
  IconCurrencyDollar,
  IconClock,
  IconCheck,
  IconArrowRight,
  IconArrowLeft,
  IconX,
  IconPlus,
  IconCertificate,
  IconSchool,
  IconMap,
} from '@tabler/icons-react';

const UserProfileForm = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { user, loading, error } = useSelector((state) => state.auth);

  // Normalize helpers to keep UI components stable
  const toArray = (val) => {
    if (Array.isArray(val)) return val;
    if (val == null) return [];
    if (typeof val === 'string') {
      try {
        const parsed = JSON.parse(val);
        if (Array.isArray(parsed)) return parsed;
        return val ? [val] : [];
      } catch {
        return val ? [val] : [];
      }
    }
    return [];
  };

  const toObject = (val) => {
    if (val && typeof val === 'object' && !Array.isArray(val)) return val;
    if (typeof val === 'string') {
      try {
        const parsed = JSON.parse(val);
        return parsed && typeof parsed === 'object' && !Array.isArray(parsed) ? parsed : {};
      } catch {
        return {};
      }
    }
    return {};
  };
  
  const [activeStep, setActiveStep] = useState(0);
  const [formData, setFormData] = useState({
    // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  first_name: '',
  last_name: '',
    phone_code: '+7',
    phone_local: '',
    date_of_birth: null,
    city: '',
    avatar: null,
    
    // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç
  education_level: '',
    bio: '',
    education_background: '',
    work_experience: '',
    
    // –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ü–µ–ª–∏
    interests: [],
    goals: [],
    
    // –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
    language_levels: {},
    
  // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –æ–±—É—á–µ–Ω–∏—é
    budget_range: '',
    study_duration: '',
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–ª—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    exams: {
      ielts: { status: '', date: '', score: '', file: null },
      toefl: { status: '', date: '', score: '', file: null },
      tolc: { status: '', date: '', score: '', file: null },
    },
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
  const [newLanguage, setNewLanguage] = useState('');
  const [newLanguageLevel, setNewLanguageLevel] = useState('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
  const isProfileComplete = () => {
    if (!user || !user.profile) return false;
    
    const profile = user.profile;
    return (
  user.phone &&
      user.city &&
      profile.education_background &&
      profile.interests?.length > 0 &&
      profile.goals?.length > 0 &&
      Object.keys(profile.language_levels || {}).length > 0 &&
      profile.budget_range &&
      profile.study_duration
    );
  };

  useEffect(() => {
    const loadUserData = async () => {
      setIsLoading(true);
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await dispatch(fetchProfile());
      } catch (error) {
        console.error('Error loading user data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadUserData();
  }, [dispatch]);

  useEffect(() => {
    if (user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
  // –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ PrivateLayout, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
  // if (isProfileComplete()) {
  //   navigate('/app/dashboard');
  //   return;
  // }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setFormData(prev => ({
        ...prev,
  first_name: user.first_name || '',
  last_name: user.last_name || '',
        phone_code: '+7',
        phone_local: '',
        date_of_birth: user.date_of_birth ? new Date(user.date_of_birth) : null,
        city: user.city || '',
        bio: user.profile?.bio || '',
        education_background: user.profile?.education_background || '',
        work_experience: user.profile?.work_experience || '',
        interests: toArray(user.profile?.interests),
        goals: toArray(user.profile?.goals),
        language_levels: toObject(user.profile?.language_levels),
        budget_range: user.profile?.budget_range || '',
        study_duration: user.profile?.study_duration || '',
      }));
    }
  }, [user, navigate]);

  const steps = [
    { title: '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', icon: IconUser },
    { title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: IconBook },
    { title: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', icon: IconCertificate },
    { title: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', icon: IconTarget },
    { title: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', icon: IconMap },
    { title: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', icon: IconMapPin },
    { title: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ', icon: IconCheck },
  ];

  // –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å —Ñ–ª–∞–≥–∞–º–∏
  const phoneCodes = [
    { value: '+39', label: 'üáÆüáπ +39' },
    { value: '+7', label: 'üá∑üá∫ +7' },
    { value: '+380', label: 'üá∫üá¶ +380' },
    { value: '+375', label: 'üáßüáæ +375' },
    { value: '+1', label: 'üá∫üá∏ +1' },
    { value: '+44', label: 'üá¨üáß +44' },
    { value: '+49', label: 'üá©üá™ +49' },
    { value: '+33', label: 'üá´üá∑ +33' },
  ];

  const interests = [
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–î–∏–∑–∞–π–Ω', '–ë–∏–∑–Ω–µ—Å', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ò–Ω–∂–µ–Ω–µ—Ä–∏—è', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
    '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞', '–ò—Å—Ç–æ—Ä–∏—è', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞',
    '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–ü—Ä–∞–≤–æ', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞', '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
    '–ú—É–∑—ã–∫–∞', '–°–ø–æ—Ä—Ç', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–ú–æ–¥–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'
  ];

  const goals = [
    '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–ø–µ–Ω—å –±–∞–∫–∞–ª–∞–≤—Ä–∞', '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–ø–µ–Ω—å –º–∞–≥–∏—Å—Ç—Ä–∞', '–ü–æ–ª—É—á–∏—Ç—å PhD',
    '–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫', '–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é', '–ü–æ–≤—ã—Å–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é',
    '–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∑–∞ —Ä—É–±–µ–∂–æ–º', '–ò–º–º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å', '–†–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä—É–≥–æ–∑–æ—Ä',
    '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π', '–†–∞–∑–≤–∏—Ç—å –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞'
  ];

  const languages = [
    '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', '–ù–µ–º–µ—Ü–∫–∏–π', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π', '–®–≤–µ–¥—Å–∫–∏–π', '–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π', '–î–∞—Ç—Å–∫–∏–π',
    '–§–∏–Ω—Å–∫–∏–π', '–ü–æ–ª—å—Å–∫–∏–π', '–ß–µ—à—Å–∫–∏–π', '–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π', '–Ø–ø–æ–Ω—Å–∫–∏–π', '–ö–æ—Ä–µ–π—Å–∫–∏–π',
    '–ö–∏—Ç–∞–π—Å–∫–∏–π', '–ê—Ä–∞–±—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–π', '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'
  ];

  const languageLevels = [
    { value: 'A1', label: 'A1 - –ù–∞—á–∞–ª—å–Ω—ã–π' },
    { value: 'A2', label: 'A2 - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π' },
    { value: 'B1', label: 'B1 - –°—Ä–µ–¥–Ω–∏–π' },
    { value: 'B2', label: 'B2 - –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ' },
    { value: 'C1', label: 'C1 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' },
    { value: 'C2', label: 'C2 - –í–ª–∞–¥–µ–Ω–∏–µ' },
    { value: 'native', label: '–†–æ–¥–Ω–æ–π —è–∑—ã–∫' }
  ];

  const budgetRanges = [
    '–î–æ 5,000‚Ç¨ –≤ –≥–æ–¥',
    '5,000‚Ç¨ - 10,000‚Ç¨ –≤ –≥–æ–¥',
    '10,000‚Ç¨ - 20,000‚Ç¨ –≤ –≥–æ–¥',
    '20,000‚Ç¨ - 30,000‚Ç¨ –≤ –≥–æ–¥',
    '30,000‚Ç¨ - 50,000‚Ç¨ –≤ –≥–æ–¥',
    '–ë–æ–ª–µ–µ 50,000‚Ç¨ –≤ –≥–æ–¥'
  ];

  const studyDurations = [
    '1 —Å–µ–º–µ—Å—Ç—Ä',
    '1 –≥–æ–¥',
    '2 –≥–æ–¥–∞',
    '3 –≥–æ–¥–∞',
    '4 –≥–æ–¥–∞',
    '5+ –ª–µ—Ç'
  ];

  const validateStep = (step) => {
    const newErrors = {};
    
    switch (step) {
      case 0: // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!formData.first_name.trim()) newErrors.first_name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        if (!formData.last_name.trim()) newErrors.last_name = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
        if (!formData.phone_local || !String(formData.phone_local).trim()) newErrors.phone_local = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        if (!formData.city || !String(formData.city).trim()) newErrors.city = '–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        break;
      case 1: // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if (!formData.education_level) newErrors.education_level = '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è';
        break;
      case 2: // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        if (!formData.exams?.ielts?.status || !formData.exams?.toefl?.status || !formData.exams?.tolc?.status) {
          newErrors.exams = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ –∫–∞–∂–¥–æ–º—É —ç–∫–∑–∞–º–µ–Ω—É (IELTS, TOEFL, TOLC)';
        }
        break;
      case 3: // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (formData.interests.length === 0) newErrors.interests = '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
        if (formData.goals.length === 0) newErrors.goals = '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å';
        break;
      case 4: // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è (–ø–æ–∫–∞ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
        break;
      case 5: // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if (!formData.budget_range) newErrors.budget_range = '–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç';
        if (!formData.study_duration) newErrors.study_duration = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è';
        break;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(activeStep)) {
      setActiveStep((prev) => prev + 1);
    }
  };

  const handlePrev = () => {
    setActiveStep((prev) => prev - 1);
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      // Validate the current step before submitting
      if (!validateStep(activeStep)) {
        setIsSubmitting(false);
        return;
      }
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º –∏–º—è/—Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      const baseUpdate = {};
      if (formData.first_name && formData.first_name !== (user?.first_name || '')) baseUpdate.first_name = formData.first_name;
      if (formData.last_name && formData.last_name !== (user?.last_name || '')) baseUpdate.last_name = formData.last_name;
      if (Object.keys(baseUpdate).length > 0) {
        await dispatch(updateProfile(baseUpdate));
      }

      // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç backend
      const payload = {
        phone: `${formData.phone_code} ${formData.phone_local}`.trim(),
        date_of_birth: formData.date_of_birth instanceof Date ? formData.date_of_birth.toISOString().slice(0,10) : formData.date_of_birth,
        city: formData.city,
        avatar: formData.avatar,
        bio: formData.bio,
        education_background: formData.education_level || formData.education_background,
        work_experience: formData.work_experience,
        interests: formData.interests,
        goals: formData.goals,
        language_levels: formData.language_levels,
        budget_range: formData.budget_range,
        study_duration: formData.study_duration,
      };

      await dispatch(updateProfileComplete(payload)).unwrap();
      
      // Show success notification
      showNotification({
        title: '–£—Å–ø–µ—à–Ω–æ',
        message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        color: 'green',
      });

  // Update profile data and navigate
  // –û—Ç–º–µ—Ç–∏–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ–º –≤ –∫–∞–±–∏–Ω–µ—Ç
  try { localStorage.setItem('onboardingComplete', 'true'); } catch {}
  navigate('/app/dashboard', { replace: true });
  // –û–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥)
  dispatch(fetchProfile());
    } catch (error) {
      console.error('Error updating profile:', error);
      // Show error notification
      showNotification({
        title: '–û—à–∏–±–∫–∞',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
        color: 'red',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: null
      }));
    }
  };

  const addLanguage = () => {
    if (newLanguage && newLanguageLevel) {
      setFormData(prev => ({
        ...prev,
        language_levels: {
          ...prev.language_levels,
          [newLanguage]: newLanguageLevel
        }
      }));
      setNewLanguage('');
      setNewLanguageLevel('');
    }
  };

  const removeLanguage = (language) => {
    const newLanguageLevels = { ...formData.language_levels };
    delete newLanguageLevels[language];
    setFormData(prev => ({
      ...prev,
      language_levels: newLanguageLevels
    }));
  };

  const renderStepContent = () => {
    switch (activeStep) {
      case 0: // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return (
          <Stack spacing="md">
            <DateInput
              label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
              value={formData.date_of_birth}
              onChange={(value) => handleInputChange('date_of_birth', value)}
              icon={<IconCalendar size={16} />}
            />
            <TextInput
              label="–ì–æ—Ä–æ–¥"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
              value={formData.city}
              onChange={(e) => handleInputChange('city', e.target.value)}
              error={errors.city}
            />
            <FileInput
              label="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ"
              accept="image/*"
              value={formData.avatar}
              onChange={(file) => handleInputChange('avatar', file)}
              icon={<IconCamera size={16} />}
            />
          </Stack>
        );

      case 1: // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        return (
          <Stack spacing="md">
            <Title order={3}>–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</Title>
            <Radio.Group value={formData.education_level} onChange={(v)=>handleInputChange('education_level', v)} error={errors.education_level}>
              <Stack>
                <Radio value="12 –∫–ª–∞—Å—Å" label="12 –∫–ª–∞—Å—Å" />
                <Radio value="1 –∫—É—Ä—Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞" label="1 –∫—É—Ä—Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞" />
              </Stack>
            </Radio.Group>
            <Divider label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
            <Textarea label="–û —Å–µ–±–µ" placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ..." value={formData.bio} onChange={(e)=>handleInputChange('bio', e.target.value)} minRows={3} />
            <Textarea label="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã" placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç..." value={formData.work_experience} onChange={(e)=>handleInputChange('work_experience', e.target.value)} minRows={3} />
          </Stack>
        );

      case 2: // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã + —è–∑—ã–∫–∏
        return (
          <Stack spacing="md">
            <Title order={3}>–Ø–∑—ã–∫–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</Title>
            {['ielts','toefl','tolc'].map((examKey) => (
              <Card key={examKey} withBorder p="md">
                <Group position="apart" mb="sm">
                  <Group>
                    <ThemeIcon variant="light" size="lg"><IconCertificate size={18} /></ThemeIcon>
                    <Text weight={500}>{examKey.toUpperCase()}</Text>
                  </Group>
                </Group>
                <SimpleGrid cols={3} spacing="sm" breakpoints={[{ maxWidth: 'sm', cols: 1 }] }>
                  <Select label="–°—Ç–∞—Ç—É—Å" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ" data={[{value:'have',label:'–ï—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'},{value:'passed',label:'–°–¥–∞–≤–∞–ª'},{value:'no',label:'–ù–µ—Ç'}]} value={formData.exams[examKey].status} onChange={(v)=>setFormData(prev=>({...prev, exams:{...prev.exams,[examKey]:{...prev.exams[examKey], status:v}}}))} />
                  <TextInput label="–î–∞—Ç–∞" placeholder="YYYY-MM" value={formData.exams[examKey].date}
                    onChange={(e)=>{
                      const val = (e.target.value || '').toUpperCase();
                      const cleaned = val.replace(/[^0-9-]/g,'').slice(0,7);
                      // enforce basic YYYY-MM structure
                      const normalized = cleaned.length > 4 && cleaned[4] !== '-' ? cleaned.slice(0,4) + '-' + cleaned.slice(4,6) : cleaned;
                      setFormData(prev=>({...prev, exams:{...prev.exams,[examKey]:{...prev.exams[examKey], date: normalized}}}));
                    }} />
                  <TextInput label="–ë–∞–ª–ª—ã" placeholder="–ù–∞–ø—Ä. 6.5" value={formData.exams[examKey].score}
                    inputMode="decimal"
                    onChange={(e)=>{
                      const raw = e.target.value || '';
                      const cleaned = raw.replace(/[^0-9.,]/g,'').replace(',','.');
                      // allow only one dot
                      const parts = cleaned.split('.');
                      const normalized = parts.length > 2 ? parts[0] + '.' + parts.slice(1).join('') : cleaned;
                      setFormData(prev=>({...prev, exams:{...prev.exams,[examKey]:{...prev.exams[examKey], score: normalized}}}));
                    }} />
                </SimpleGrid>
                <Group mt="sm">
                  <FileInput label="–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª" accept="application/pdf" value={formData.exams[examKey].file} onChange={(file)=>setFormData(prev=>({...prev, exams:{...prev.exams,[examKey]:{...prev.exams[examKey], file}}}))} />
                </Group>
              </Card>
            ))}

            <Divider label="–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏" />
            {Object.entries(formData.language_levels).map(([language, level]) => (
              <Card key={language} withBorder p="sm">
                <Group position="apart">
                  <Text weight={500}>{language}</Text>
                  <Group spacing="xs">
                    <Badge color="blue">{level}</Badge>
                    <ActionIcon color="red" variant="light" size="sm" onClick={() => removeLanguage(language)}>
                      <IconX size={14} />
                    </ActionIcon>
                  </Group>
                </Group>
              </Card>
            ))}
            <Grid>
              <Grid.Col span={5}>
                <Select label="–Ø–∑—ã–∫" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" data={languages.filter(lang => !formData.language_levels[lang])} value={newLanguage} onChange={setNewLanguage} searchable />
              </Grid.Col>
              <Grid.Col span={5}>
                <Select label="–£—Ä–æ–≤–µ–Ω—å" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å" data={languageLevels} value={newLanguageLevel} onChange={setNewLanguageLevel} />
              </Grid.Col>
              <Grid.Col span={2}>
                <Button onClick={addLanguage} disabled={!newLanguage || !newLanguageLevel} fullWidth style={{ marginTop: 25 }}>
                  <IconPlus size={16} />
                </Button>
              </Grid.Col>
            </Grid>
            {errors.language_levels && (<Text size="sm" c="red">{errors.language_levels}</Text>)}
          </Stack>
        );

      case 3: // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return (
          <Stack spacing="md">
            <MultiSelect
              label="–ò–Ω—Ç–µ—Ä–µ—Å—ã"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã"
              data={interests}
              value={Array.isArray(formData.interests) ? formData.interests : toArray(formData.interests)}
              onChange={(value) => handleInputChange('interests', Array.isArray(value) ? value : toArray(value))}
              error={errors.interests}
              searchable
            />
            
            <MultiSelect
              label="–¶–µ–ª–∏"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏"
              data={goals}
              value={Array.isArray(formData.goals) ? formData.goals : toArray(formData.goals)}
              onChange={(value) => handleInputChange('goals', Array.isArray(value) ? value : toArray(value))}
              searchable
            />
          </Stack>
        );

      case 4: // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è (–ø–æ–∫–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω)
        return (
          <Stack spacing="md">
            <Card withBorder p="md">
              <Group>
                <ThemeIcon variant="light"><IconMap size={16}/></ThemeIcon>
                <Text size="sm" c="dimmed">–ú—ã –ø–æ–¥–±–µ—Ä–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –±—é–¥–∂–µ—Ç–∞. –≠—Ç–æ—Ç —à–∞–≥ –ø–æ–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.</Text>
              </Group>
            </Card>
          </Stack>
        );

      case 5: // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        return (
          <Stack spacing="md">
            <Select label="–ë—é–¥–∂–µ—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç" data={budgetRanges} value={formData.budget_range} onChange={(value) => handleInputChange('budget_range', value)} error={errors.budget_range} icon={<IconCurrencyDollar size={16} />} />
            <Select label="–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" data={studyDurations} value={formData.study_duration} onChange={(value) => handleInputChange('study_duration', value)} error={errors.study_duration} icon={<IconClock size={16} />} />
          </Stack>
        );

      case 6: // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        return (
          <Stack spacing="md">
            <Alert color="green" icon={<IconCheck size={16} />}>
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.
            </Alert>
            
            <Card withBorder p="md">
              <Text weight={500} mb="md">–°–≤–æ–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è</Text>
              <Stack spacing="xs">
                <Text size="sm"><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {`${formData.phone_code} ${formData.phone_local}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
                <Text size="sm"><strong>–ì–æ—Ä–æ–¥:</strong> {formData.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
                <Text size="sm"><strong>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</strong> {formData.interests.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</Text>
                <Text size="sm"><strong>–¶–µ–ª–∏:</strong> {formData.goals.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</Text>
                <Text size="sm"><strong>–Ø–∑—ã–∫–∏:</strong> {Object.keys(formData.language_levels).length} —è–∑—ã–∫–æ–≤</Text>
                
              </Stack>
            </Card>
          </Stack>
        );

      default:
        return null;
    }
  };

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ AI
  const aiHints = useMemo(() => {
    const hints = [];
    if (activeStep === 1 && formData.education_level === '12 –∫–ª–∞—Å—Å') {
      hints.push('–í—ã –≤—ã–±—Ä–∞–ª–∏ 12 –∫–ª–∞—Å—Å ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–≥–∏ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è');
    }
    if (activeStep === 2 && Object.keys(formData.language_levels).length > 0) {
      hints.push('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å ‚Äî —ç—Ç–æ —É—Å–∏–ª–∏—Ç –∑–∞—è–≤–∫—É');
    }
    if (activeStep === 3 && formData.interests.includes('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ')) {
      hints.push('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: Data Science, Cybersecurity, AI');
    }
  // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–∫–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω
    if (activeStep === 5 && formData.budget_range) {
      hints.push(`–ü–æ–¥–±–µ—Ä–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –±—é–¥–∂–µ—Ç–µ: ${formData.budget_range}`);
    }
    return hints;
  }, [activeStep, formData]);

  const pct = Math.round(((activeStep + 1) / steps.length) * 100);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (isLoading) {
    return (
      <Container size="md" py="xl">
        <Center>
          <Stack align="center" spacing="md">
            <Loader size="lg" />
            <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...</Text>
          </Stack>
        </Center>
      </Container>
    );
  }

  return (
    <Container size="xl" py="xl">
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
        <Grid gutter="xl">
          {/* –õ–µ–≤–æ–µ –º–µ–Ω—é —à–∞–≥–æ–≤ */}
          <Grid.Col span={2}>
            <Paper withBorder radius="md" p="md" style={{ paddingTop: 14 }}>
              <Stack>
                {steps.map((s, idx) => (
                  <Group
                    key={s.title}
                    spacing="sm"
                    style={{ cursor: idx <= activeStep ? 'pointer' : 'not-allowed', opacity: idx <= activeStep ? 1 : 0.5 }}
                    onClick={() => {
                      if (idx <= activeStep) setActiveStep(idx);
                    }}
                  >
                    <ThemeIcon
                      color={idx === activeStep ? 'teal' : 'gray'}
                      radius="xl"
                      size="lg"
                      style={{ display: 'inline-flex', alignItems: 'center', justifyContent: 'center' }}
                    >
                      <span style={{ fontWeight: 700, lineHeight: 1 }}>{idx + 1}</span>
                    </ThemeIcon>
                    <Text size="sm" weight={idx === activeStep ? 600 : 400}>{s.title}</Text>
                  </Group>
                ))}
              </Stack>
            </Paper>
          </Grid.Col>

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <Grid.Col span={7}>
            <Paper withBorder radius="md" p="lg">
              <Group position="apart" mb="md">
                <Title order={2}>{steps[activeStep].title}</Title>
                <Group spacing="xs" align="center">
                  <Text size="sm" c="dimmed">{activeStep + 1}/{steps.length}</Text>
                  <Progress value={pct} w={120} size="sm"/>
                </Group>
              </Group>

              <Box style={{ minHeight: 420 }}>
                {activeStep === 0 ? (
                  <Stack spacing="md">
                    <Grid>
                      <Grid.Col span={6}>
                        <TextInput label="–ò–º—è" placeholder="–ò–º—è" value={formData.first_name} onChange={(e)=>handleInputChange('first_name', e.target.value)} error={errors.first_name} leftSection={<IconUser size={16} />} />
                      </Grid.Col>
                      <Grid.Col span={6}>
                        <TextInput label="–§–∞–º–∏–ª–∏—è" placeholder="–§–∞–º–∏–ª–∏—è" value={formData.last_name} onChange={(e)=>handleInputChange('last_name', e.target.value)} error={errors.last_name} leftSection={<IconUser size={16} />} />
                      </Grid.Col>
                    </Grid>
                    <Grid>
                      <Grid.Col span={6}>
                        <DateInput
                          label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
                          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                          value={formData.date_of_birth}
                          onChange={(value)=>handleInputChange('date_of_birth', value)}
                          valueFormat="YYYY-MM-DD"
                          maxDate={new Date()}
                        />
                      </Grid.Col>
                      <Grid.Col span={6}>
                          <Group spacing="xs" align="flex-end" wrap="nowrap">
                          <Select
                            label="–ö–æ–¥"
                            data={phoneCodes}
                            value={formData.phone_code}
                            onChange={(v)=>handleInputChange('phone_code', v)}
                            w={120}
                          />
                          <TextInput
                            label="–¢–µ–ª–µ—Ñ–æ–Ω"
                            placeholder="(999) 123-45-67"
                            value={formData.phone_local}
                            inputMode="numeric"
                            onChange={(e)=>{
                              const onlyDigits = (e.target.value || '').replace(/\D+/g, '').slice(0, 15);
                              handleInputChange('phone_local', onlyDigits);
                            }}
                            error={errors.phone_local}
                            leftSection={<IconPhone size={16} />}
                            style={{ flex: 1 }}
                          />
                        </Group>
                      </Grid.Col>
                    </Grid>
                    <Grid>
                      <Grid.Col span={6}>
                        <TextInput label="–ì–æ—Ä–æ–¥" placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥" value={formData.city} onChange={(e)=>handleInputChange('city', e.target.value)} error={errors.city} />
                      </Grid.Col>
                    </Grid>
                  </Stack>
                ) : (
                  <Box>{renderStepContent()}</Box>
                )}
              </Box>

              <Group position="apart" mt="xl">
                <Button variant="default" leftSection={<IconArrowLeft size={16} />} onClick={handlePrev} disabled={activeStep === 0}>–ù–∞–∑–∞–¥</Button>
                {activeStep === steps.length - 1 ? (
                  <Button leftSection={<IconCheck size={16} />} onClick={handleSubmit} loading={isSubmitting}>–ó–∞–≤–µ—Ä—à–∏—Ç—å</Button>
                ) : (
                  <Button rightSection={<IconArrowRight size={16} />} onClick={() => { if (validateStep(activeStep)) setActiveStep((s)=>s+1); }}>–î–∞–ª–µ–µ</Button>
                )}
              </Group>

              {Object.keys(errors || {}).length > 0 && (
                <Alert color="red" mt="md">
                  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ.
                </Alert>
              )}
            </Paper>
          </Grid.Col>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
          <Grid.Col span={3}>
            <Paper withBorder radius="md" p="lg">
              <Title order={4}>AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏</Title>
              <Stack mt="md" spacing="sm">
                {aiHints.length === 0 ? (
                  <Text size="sm" c="dimmed">–ü–æ—è–≤—è—Ç—Å—è –ø–æ –º–µ—Ä–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</Text>
                ) : (
                  aiHints.map((h, i) => (
                    <Group key={i} align="flex-start" spacing="xs">
                      <ThemeIcon radius="xl" size={22} color="teal"><IconCheck size={14} /></ThemeIcon>
                      <Text size="sm">{h}</Text>
                    </Group>
                  ))
                )}
              </Stack>
            </Paper>
          </Grid.Col>
        </Grid>
      </motion.div>
    </Container>
  );
};

export default UserProfileForm;
