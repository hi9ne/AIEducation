import { useEffect } from 'react';
import { useSelector } from 'react-redux';
import React, { useState } from 'react';
import { 
  Box, 
  Stack, 
  Text, 
  Paper, 
  Group, 
  Card, 
  Button,
  Grid,
  TextInput,
  Select,
  Switch,
  Divider,
  Avatar,
  ActionIcon,
  FileInput,
  NumberInput,
  Textarea
} from '@mantine/core';
import { 
  IconUser, 
  IconMail, 
  IconPhone, 
  IconCalendar,
  IconMapPin,
  IconLanguage,
  IconBell,
  IconCamera,
  IconDeviceFloppy,
  IconEdit,
  IconX
} from '@tabler/icons-react';

const SettingsSection = () => {
  const { user } = useSelector((state) => state.auth);
  const [isEditing, setIsEditing] = useState(false);
  const [avatar, setAvatar] = useState(null);
  
  const [userData, setUserData] = useState({
    firstName: user?.first_name || '',
    lastName: user?.last_name || '',
    email: user?.email || '',
    phone: user?.phone || '',
    birthDate: user?.date_of_birth || '',
    city: user?.city || '',
    country: user?.country || '',
    language: 'ru',
    notifications: {
      email: true,
      push: true,
      sms: false,
      deadlines: true,
      progress: true,
      ai: true
    }
  });

  const [ieltsGoals, setIeltsGoals] = useState({
    current: 5.5,
    target: 7.0,
    testDate: '2024-06-15'
  });

  const [tolcGoals, setTolcGoals] = useState({
    current: 0,
    target: 0,
    testDate: ''
  });

  const handleSave = () => {
    // Здесь будет логика сохранения данных
    setIsEditing(false);
    console.log('Данные сохранены:', userData);
  };

  const handleCancel = () => {
    setIsEditing(false);
    // Здесь можно восстановить исходные данные
  };

  return (
    <Box className="p-6">
      <Stack gap="xl">
        {/* Header */}
        <Box>
          <Text size="xl" fw={700} c="dark">
            Настройки профиля
          </Text>
          <Text size="md" c="dimmed">
            Управление личными данными и настройками
          </Text>
        </Box>

        {/* Profile Section */}
        <Paper className="p-6" shadow="sm">
          <Group justify="space-between" align="center" className="mb-4">
            <Text size="lg" fw={600}>
              Личная информация
            </Text>
            <Group>
              {isEditing ? (
                <Group>
                  <Button
                    leftSection={<IconDeviceFloppy size={16} />}
                    onClick={handleSave}
                    color="green"
                  >
                    Сохранить
                  </Button>
                  <Button
                    leftSection={<IconX size={16} />}
                    onClick={handleCancel}
                    variant="outline"
                  >
                    Отмена
                  </Button>
                </Group>
              ) : (
                <Button
                  leftSection={<IconEdit size={16} />}
                  onClick={() => setIsEditing(true)}
                >
                  Редактировать
                </Button>
              )}
            </Group>
          </Group>

          <Grid>
            <Grid.Col span={{ base: 12, md: 4 }}>
              <Stack align="center" gap="md">
                <Avatar
                  size={120}
                  radius="xl"
                  color="blue"
                  src={avatar}
                >
                  АС
                </Avatar>
                {isEditing && (
                  <FileInput
                    placeholder="Изменить фото"
                    leftSection={<IconCamera size={16} />}
                    value={avatar}
                    onChange={setAvatar}
                    accept="image/*"
                    size="sm"
                  />
                )}
                <Text size="sm" c="dimmed" ta="center">
                  {userData.firstName} {userData.lastName}
                </Text>
              </Stack>
            </Grid.Col>
            <Grid.Col span={{ base: 12, md: 8 }}>
              <Stack gap="md">
                <Grid>
                  <Grid.Col span={6}>
                    <TextInput
                      label="Имя"
                      value={userData.firstName}
                      onChange={(e) => setUserData({...userData, firstName: e.target.value})}
                      disabled={!isEditing}
                      leftSection={<IconUser size={16} />}
                    />
                  </Grid.Col>
                  <Grid.Col span={6}>
                    <TextInput
                      label="Фамилия"
                      value={userData.lastName}
                      onChange={(e) => setUserData({...userData, lastName: e.target.value})}
                      disabled={!isEditing}
                    />
                  </Grid.Col>
                </Grid>
                
                <TextInput
                  label="Email"
                  value={userData.email}
                  onChange={(e) => setUserData({...userData, email: e.target.value})}
                  disabled={!isEditing}
                  leftSection={<IconMail size={16} />}
                />
                
                <TextInput
                  label="Телефон"
                  value={userData.phone}
                  onChange={(e) => setUserData({...userData, phone: e.target.value})}
                  disabled={!isEditing}
                  leftSection={<IconPhone size={16} />}
                />
                
                <Grid>
                  <Grid.Col span={6}>
                    <TextInput
                      label="Дата рождения"
                      type="date"
                      value={userData.birthDate}
                      onChange={(e) => setUserData({...userData, birthDate: e.target.value})}
                      disabled={!isEditing}
                      leftSection={<IconCalendar size={16} />}
                    />
                  </Grid.Col>
                  <Grid.Col span={6}>
                    <TextInput
                      label="Город"
                      value={userData.city}
                      onChange={(e) => setUserData({...userData, city: e.target.value})}
                      disabled={!isEditing}
                      leftSection={<IconMapPin size={16} />}
                    />
                  </Grid.Col>
                </Grid>
              </Stack>
            </Grid.Col>
          </Grid>
        </Paper>

        {/* Academic Goals */}
        <Paper className="p-6" shadow="sm">
          <Text size="lg" fw={600} className="mb-4">
            Академические цели
          </Text>
          
          <Grid>
            <Grid.Col span={{ base: 12, md: 6 }}>
              <Card shadow="sm" padding="lg" radius="md" withBorder>
                <Stack gap="md">
                  <Text size="md" fw={600} c="dark">
                    IELTS
                  </Text>
                  <NumberInput
                    label="Текущий уровень"
                    value={ieltsGoals.current}
                    onChange={(value) => setIeltsGoals({...ieltsGoals, current: value})}
                    min={4}
                    max={9}
                    step={0.5}
                    precision={1}
                    disabled={!isEditing}
                  />
                  <NumberInput
                    label="Целевой уровень"
                    value={ieltsGoals.target}
                    onChange={(value) => setIeltsGoals({...ieltsGoals, target: value})}
                    min={4}
                    max={9}
                    step={0.5}
                    precision={1}
                    disabled={!isEditing}
                  />
                  <TextInput
                    label="Дата теста"
                    type="date"
                    value={ieltsGoals.testDate}
                    onChange={(e) => setIeltsGoals({...ieltsGoals, testDate: e.target.value})}
                    disabled={!isEditing}
                  />
                </Stack>
              </Card>
            </Grid.Col>
            
            <Grid.Col span={{ base: 12, md: 6 }}>
              <Card shadow="sm" padding="lg" radius="md" withBorder>
                <Stack gap="md">
                  <Text size="md" fw={600} c="dark">
                    TOLC
                  </Text>
                  <NumberInput
                    label="Текущий балл"
                    value={tolcGoals.current}
                    onChange={(value) => setTolcGoals({...tolcGoals, current: value})}
                    min={0}
                    max={50}
                    step={1}
                    disabled={!isEditing}
                  />
                  <NumberInput
                    label="Целевой балл"
                    value={tolcGoals.target}
                    onChange={(value) => setTolcGoals({...tolcGoals, target: value})}
                    min={0}
                    max={50}
                    step={1}
                    disabled={!isEditing}
                  />
                  <TextInput
                    label="Дата теста"
                    type="date"
                    value={tolcGoals.testDate}
                    onChange={(e) => setTolcGoals({...tolcGoals, testDate: e.target.value})}
                    disabled={!isEditing}
                  />
                </Stack>
              </Card>
            </Grid.Col>
          </Grid>
        </Paper>

        {/* Notifications */}
        <Paper className="p-6" shadow="sm">
          <Text size="lg" fw={600} className="mb-4">
            Уведомления
          </Text>
          
          <Stack gap="md">
            <Group justify="space-between" align="center">
              <Box>
                <Text size="md" fw={500}>Email уведомления</Text>
                <Text size="sm" c="dimmed">Получать уведомления на email</Text>
              </Box>
              <Switch
                checked={userData.notifications.email}
                onChange={(e) => setUserData({
                  ...userData,
                  notifications: {...userData.notifications, email: e.currentTarget.checked}
                })}
                disabled={!isEditing}
              />
            </Group>
            
            <Group justify="space-between" align="center">
              <Box>
                <Text size="md" fw={500}>Push уведомления</Text>
                <Text size="sm" c="dimmed">Уведомления в браузере</Text>
              </Box>
              <Switch
                checked={userData.notifications.push}
                onChange={(e) => setUserData({
                  ...userData,
                  notifications: {...userData.notifications, push: e.currentTarget.checked}
                })}
                disabled={!isEditing}
              />
            </Group>
            
            <Group justify="space-between" align="center">
              <Box>
                <Text size="md" fw={500}>SMS уведомления</Text>
                <Text size="sm" c="dimmed">Уведомления по SMS</Text>
              </Box>
              <Switch
                checked={userData.notifications.sms}
                onChange={(e) => setUserData({
                  ...userData,
                  notifications: {...userData.notifications, sms: e.currentTarget.checked}
                })}
                disabled={!isEditing}
              />
            </Group>
            
            <Divider />
            
            <Group justify="space-between" align="center">
              <Box>
                <Text size="md" fw={500}>Напоминания о дедлайнах</Text>
                <Text size="sm" c="dimmed">Уведомления о важных датах</Text>
              </Box>
              <Switch
                checked={userData.notifications.deadlines}
                onChange={(e) => setUserData({
                  ...userData,
                  notifications: {...userData.notifications, deadlines: e.currentTarget.checked}
                })}
                disabled={!isEditing}
              />
            </Group>
            
            <Group justify="space-between" align="center">
              <Box>
                <Text size="md" fw={500}>Прогресс обучения</Text>
                <Text size="sm" c="dimmed">Уведомления о достижениях</Text>
              </Box>
              <Switch
                checked={userData.notifications.progress}
                onChange={(e) => setUserData({
                  ...userData,
                  notifications: {...userData.notifications, progress: e.currentTarget.checked}
                })}
                disabled={!isEditing}
              />
            </Group>
            
            <Group justify="space-between" align="center">
              <Box>
                <Text size="md" fw={500}>AI рекомендации</Text>
                <Text size="sm" c="dimmed">Персональные советы от AI</Text>
              </Box>
              <Switch
                checked={userData.notifications.ai}
                onChange={(e) => setUserData({
                  ...userData,
                  notifications: {...userData.notifications, ai: e.currentTarget.checked}
                })}
                disabled={!isEditing}
              />
            </Group>
          </Stack>
        </Paper>

        {/* Language Settings */}
        <Paper className="p-6" shadow="sm">
          <Text size="lg" fw={600} className="mb-4">
            Язык интерфейса
          </Text>
          
          <Select
            label="Выберите язык"
            data={[
              { value: 'ru', label: 'Русский' },
              { value: 'en', label: 'English' },
              { value: 'kz', label: 'Қазақша' }
            ]}
            value={userData.language}
            onChange={(value) => setUserData({...userData, language: value})}
            leftSection={<IconLanguage size={16} />}
            disabled={!isEditing}
            className="max-w-xs"
          />
        </Paper>

        {/* Additional Info */}
        <Paper className="p-6" shadow="sm">
          <Text size="lg" fw={600} className="mb-4">
            Дополнительная информация
          </Text>
          
          <Textarea
            label="О себе"
            placeholder="Расскажите о своих целях и интересах..."
            value={userData.about || ''}
            onChange={(e) => setUserData({...userData, about: e.target.value})}
            disabled={!isEditing}
            minRows={3}
            maxRows={6}
          />
        </Paper>
      </Stack>
    </Box>
  );
};

export default SettingsSection;
