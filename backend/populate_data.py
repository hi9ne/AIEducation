#!/usr/bin/env python
import os
import django
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aieducation.settings')
django.setup()

from django.contrib.auth import get_user_model
from education.models import *
from accounts.models import UserProfile
from payments.models import *
from notifications.models import *

User = get_user_model()

def create_test_data():
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = User.objects.get_or_create(
        email='test@example.com',
        defaults={
            'username': 'testuser',
            'first_name': 'Test',
            'last_name': 'User',
            'is_verified': True
        }
    )
    if created:
        user.set_password('testpass123')
        user.save()
        print(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile, created = UserProfile.objects.get_or_create(
        user=user,
        defaults={
            'bio': '–°—Ç—É–¥–µ–Ω—Ç, –∏–∑—É—á–∞—é—â–∏–π –∑–∞—Ä—É–±–µ–∂–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            'interests': ['Computer Science', 'Engineering', 'Medicine'],
            'goals': ['–ü–æ—Å—Ç—É–ø–∏—Ç—å –≤ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–ò–∑—É—á–∏—Ç—å –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —è–∑—ã–∫'],
            'language_levels': {'English': 'B2', 'Italian': 'A1'},
            'preferred_countries': ['Italy', 'Germany', 'France'],
            'budget_range': '2000-5000 EUR',
            'study_duration': '3-4 years'
        }
    )
    if created:
        print(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è: {user.email}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    majors_data = [
        {'name': 'Computer Science', 'description': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏', 'category': 'Technology'},
        {'name': 'Engineering', 'description': '–ò–Ω–∂–µ–Ω–µ—Ä–∏—è', 'category': 'Technology'},
        {'name': 'Medicine', 'description': '–ú–µ–¥–∏—Ü–∏–Ω–∞', 'category': 'Health'},
        {'name': 'Business', 'description': '–ë–∏–∑–Ω–µ—Å –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', 'category': 'Business'},
        {'name': 'Art', 'description': '–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω', 'category': 'Arts'},
        {'name': 'Architecture', 'description': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'category': 'Design'},
        {'name': 'Literature', 'description': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'category': 'Humanities'},
        {'name': 'Economics', 'description': '–≠–∫–æ–Ω–æ–º–∏–∫–∞', 'category': 'Social Sciences'},
    ]
    
    for major_data in majors_data:
        major, created = Major.objects.get_or_create(
            name=major_data['name'],
            defaults=major_data
        )
        if created:
            print(f"–°–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {major.name}")
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã
    universities_data = [
        {
            'name': 'University of Bologna',
            'country': 'Italy',
            'city': 'Bologna',
            'description': '–°—Ç–∞—Ä–µ–π—à–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤ –º–∏—Ä–µ, –æ—Å–Ω–æ–≤–∞–Ω –≤ 1088 –≥–æ–¥—É. –í–µ–¥—É—â–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏.',
            'website': 'https://www.unibo.it',
            'ranking': 160,
            'tuition_fee': 2000,
            'student_count': 87000,
            'founded_year': 1088
        },
        {
            'name': 'Sapienza University of Rome',
            'country': 'Italy',
            'city': 'Rome',
            'description': '–ö—Ä—É–ø–Ω–µ–π—à–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤ –ï–≤—Ä–æ–ø–µ, –æ—Å–Ω–æ–≤–∞–Ω –≤ 1303 –≥–æ–¥—É. –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –ò—Ç–∞–ª–∏–∏.',
            'website': 'https://www.uniroma1.it',
            'ranking': 171,
            'tuition_fee': 1500,
            'student_count': 112000,
            'founded_year': 1303
        },
        {
            'name': 'University of Milan',
            'country': 'Italy',
            'city': 'Milan',
            'description': '–í–µ–¥—É—â–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤ –ú–∏–ª–∞–Ω–µ. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω–µ, –±–∏–∑–Ω–µ—Å–µ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏.',
            'website': 'https://www.unimi.it',
            'ranking': 301,
            'tuition_fee': 2500,
            'student_count': 60000,
            'founded_year': 1924
        },
        {
            'name': 'University of Florence',
            'country': 'Italy',
            'city': 'Florence',
            'description': '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤ —Å–µ—Ä–¥—Ü–µ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫–∞—Ö.',
            'website': 'https://www.unifi.it',
            'ranking': 401,
            'tuition_fee': 1800,
            'student_count': 51000,
            'founded_year': 1321
        },
        {
            'name': 'Technical University of Munich',
            'country': 'Germany',
            'city': 'Munich',
            'description': '–û–¥–∏–Ω –∏–∑ –≤–µ–¥—É—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –º–∏—Ä–∞. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.',
            'website': 'https://www.tum.de',
            'ranking': 50,
            'tuition_fee': 0,
            'student_count': 42000,
            'founded_year': 1868
        }
    ]
    
    for uni_data in universities_data:
        university, created = University.objects.get_or_create(
            name=uni_data['name'],
            defaults=uni_data
        )
        if created:
            print(f"–°–æ–∑–¥–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university.name}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
    university_majors = [
        ('University of Bologna', ['Computer Science', 'Engineering', 'Medicine', 'Business']),
        ('Sapienza University of Rome', ['Architecture', 'Engineering', 'Literature', 'Medicine']),
        ('University of Milan', ['Business', 'Economics', 'Medicine', 'Computer Science']),
        ('University of Florence', ['Art', 'History', 'Architecture', 'Literature']),
        ('Technical University of Munich', ['Engineering', 'Computer Science', 'Architecture'])
    ]
    
    for uni_name, major_names in university_majors:
        try:
            university = University.objects.get(name=uni_name)
            for major_name in major_names:
                try:
                    major = Major.objects.get(name=major_name)
                    UniversityMajor.objects.get_or_create(
                        university=university,
                        major=major,
                        defaults={
                            'duration_years': 3,
                            'language': 'English',
                            'requirements': 'High school diploma, language certificate'
                        }
                    )
                except Major.DoesNotExist:
                    pass
        except University.DoesNotExist:
            pass
    
    # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã
    courses_data = [
        {
            'title': 'Introduction to Computer Science',
            'description': '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
            'university': 'University of Bologna',
            'major': 'Computer Science',
            'instructor': 'Prof. Mario Rossi',
            'duration_weeks': 12,
            'difficulty_level': 'beginner',
            'price': 0,
            'is_free': True
        },
        {
            'title': 'Advanced Programming',
            'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python –∏ Java',
            'university': 'University of Bologna',
            'major': 'Computer Science',
            'instructor': 'Prof. Anna Bianchi',
            'duration_weeks': 16,
            'difficulty_level': 'intermediate',
            'price': 500,
            'is_free': False
        },
        {
            'title': 'Medical Anatomy',
            'description': '–ê–Ω–∞—Ç–æ–º–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤-–º–µ–¥–∏–∫–æ–≤',
            'university': 'University of Milan',
            'major': 'Medicine',
            'instructor': 'Prof. Giuseppe Verdi',
            'duration_weeks': 20,
            'difficulty_level': 'advanced',
            'price': 800,
            'is_free': False
        }
    ]
    
    for course_data in courses_data:
        try:
            university = University.objects.get(name=course_data['university'])
            major = Major.objects.get(name=course_data['major'])
            course, created = Course.objects.get_or_create(
                title=course_data['title'],
                university=university,
                defaults={
                    'description': course_data['description'],
                    'major': major,
                    'instructor': course_data['instructor'],
                    'duration_weeks': course_data['duration_weeks'],
                    'difficulty_level': course_data['difficulty_level'],
                    'price': course_data['price'],
                    'is_free': course_data['is_free']
                }
            )
            if created:
                print(f"–°–æ–∑–¥–∞–Ω –∫—É—Ä—Å: {course.title}")
        except (University.DoesNotExist, Major.DoesNotExist):
            pass
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements_data = [
        {'name': '–ù–æ–≤–∏—á–æ–∫', 'description': '–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', 'icon': 'üéâ', 'points': 10, 'category': 'general'},
        {'name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', 'description': '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª 10 —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤', 'icon': 'üîç', 'points': 25, 'category': 'exploration'},
        {'name': '–°—Ç—É–¥–µ–Ω—Ç', 'description': '–ó–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å', 'icon': 'üìö', 'points': 50, 'category': 'learning'},
        {'name': '–ü–æ–ª–∏–≥–ª–æ—Ç', 'description': '–ò–∑—É—á–∏–ª 3 —è–∑—ã–∫–∞', 'icon': 'üåç', 'points': 100, 'category': 'language'},
        {'name': '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç', 'description': '–ü–æ–¥–∞–ª –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É', 'icon': 'üìù', 'points': 75, 'category': 'application'},
    ]
    
    for achievement_data in achievements_data:
        achievement, created = Achievement.objects.get_or_create(
            name=achievement_data['name'],
            defaults=achievement_data
        )
        if created:
            print(f"–°–æ–∑–¥–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.name}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UserAchievement.objects.get_or_create(
        user=user,
        achievement=Achievement.objects.get(name='–ù–æ–≤–∏—á–æ–∫')
    )
    UserAchievement.objects.get_or_create(
        user=user,
        achievement=Achievement.objects.get(name='–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å')
    )
    
    # –°–æ–∑–¥–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations_data = [
        {
            'title': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã',
            'content': '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –≤ –ò—Ç–∞–ª–∏–∏: University of Bologna –∏ University of Milan.',
            'category': 'university',
            'priority': 1
        },
        {
            'title': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ IELTS',
            'content': '–ù–∞—á–Ω–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ IELTS –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±–∞–ª–ª: 6.5+',
            'category': 'preparation',
            'priority': 2
        },
        {
            'title': '–°–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            'content': '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –¥–∏–ø–ª–æ–º, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç, –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ.',
            'category': 'documents',
            'priority': 3
        }
    ]
    
    for rec_data in recommendations_data:
        AIRecommendation.objects.get_or_create(
            user=user,
            title=rec_data['title'],
            defaults=rec_data
        )
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications_data = [
        {
            'title': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
            'message': '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∑–∞ —Ä—É–±–µ–∂–æ–º.',
            'notification_type': 'info'
        },
        {
            'title': '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
            'message': '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–æ–∫ "–ù–æ–≤–∏—á–æ–∫".',
            'notification_type': 'achievement'
        },
        {
            'title': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
            'message': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.',
            'notification_type': 'warning'
        }
    ]
    
    for notif_data in notifications_data:
        Notification.objects.get_or_create(
            user=user,
            title=notif_data['title'],
            defaults=notif_data
        )
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    plans_data = [
        {
            'name': '–ë–∞–∑–æ–≤—ã–π',
            'description': '–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º',
            'price': 9.99,
            'duration_days': 30,
            'features': ['–ü–æ–∏—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤', '–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']
        },
        {
            'name': '–ü—Ä–µ–º–∏—É–º',
            'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º',
            'price': 19.99,
            'duration_days': 30,
            'features': ['–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–∞–∑–æ–≤–æ–≥–æ', 'AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä']
        },
        {
            'name': '–ì–æ–¥–æ–≤–æ–π',
            'description': '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π',
            'price': 199.99,
            'duration_days': 365,
            'features': ['–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã']
        }
    ]
    
    for plan_data in plans_data:
        plan, created = SubscriptionPlan.objects.get_or_create(
            name=plan_data['name'],
            defaults=plan_data
        )
        if created:
            print(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {plan.name}")
    
    print("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

if __name__ == '__main__':
    create_test_data()
